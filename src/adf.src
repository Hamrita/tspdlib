

/*
**> adf
**  Reference:
**  Dickey, D.A., Fuller, W.A. (1979).
**  Distribution of the estimators for autoregressive time series with a unit root.
**  Journal of the American Statistical Society75, 427-431.
**
**  Format:  { tstat, p, cv } = ADF(y, model, pmax, ic);
**
**  Input:   Y	     -  Nx1 matrix, data,
**           model   - 	0 = none
**                      1 = model with constant
**                      2 = model with constant and trend
**           pmax    -  Maximum number of lags for Dy; 0=no lags
**           ic      -  Information Criterion:
**                      1=Akaike
**                      2=Schwarz
**                      3=t-stat significance
**
**  Output:  tstat   - ADF tau-statistic
**			 p       - number of lags selected by chosen information criterion
**			 cv      - 1, 5, and 10 percent critical values for ADF tau-stat
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/


proc(3) = ADF(y, model, pmax, ic);
    local t, p, j, taup, aicp, sicp, tstatp, check;
    local dy, ly, dc, dt, lmat, dep, y1, ldy;
    local sbt, trnd, x, lagt, tau, LL, n, k;
    local b, e1, sig2, se, ssr, cv;
    
    t    = rows(y);
    taup = zeros(pmax + 1, 1);
    aicp = zeros(pmax + 1, 1);
    sicp = zeros(pmax + 1, 1);
    tstatp = zeros(pmax + 1, 1);
    
    dy = diff(y, 1);
    ly = lagn(y, 1);
    dc = ones(t, 1);       /*Deterministic term=constant*/
    dt = seqa(1, 1, t);     /*Deterministic term=trend*/
    
    p = 0;
    do while p <= pmax;
        lmat = zeros(rows(dy), p + 1);
        j = 1;
        do while j <= p;
            lmat[., j] = lagn(dy, j);
            j = j + 1;
        endo;
        dep = trimr(dy, p + 1, 0);
        y1 = trimr(ly, p + 1, 0);
        ldy = trimr(lmat, p + 1, 0);
        sbt = trimr(dc, p + 1, 0);
        trnd = trimr(dt, p + 1, 0);
        
        if p == 0;
            if model == 0;
                x = y1;
            endif;
            if model == 1;
                x = y1~sbt;
            endif;
            if model == 2;
                x = y1~sbt~trnd;
            endif;
        elseif p > 0;
            if model == 0;
                x = y1~ldy[., 1:p];
            endif;
            if model == 1;
                x = y1~sbt~ldy[., 1:p];
            endif;
            if model == 2;
                x = y1~sbt~trnd~ldy[., 1:p];
            endif;
        endif;
        
        {b, e1, sig2, se, ssr} = myols(dep, x);
        taup[p+1] = b[1]/se[1];
        n = rows(x);
        k = cols(x);
        
        // Log-likelihood
        LL = -n/2 * (1 + ln(2*pi) + ln(e1'e1/n));     
        
        aicp[p+1] = (2 * k-2 * LL)/n;
        sicp[p+1] = (k * ln(n) - 2 * LL)/n;
        tstatp[p+1] = abs(b[cols(x)]/se[cols(x)]);
        p = p + 1;
    endo;
 
    p   = _get_lag(ic, pmax, aicp, sicp, tstatp);
    tau = taup[p];
    cv  = _get_cv_adf(model, t);
    
    // Print results
    if model == 0;
        print "ADF &  lag no deterministic component";
    elseif model == 1;
        print "ADF &  lag with constant";
    elseif  model == 2;
        print "ADF &  lag with constant and trend";
    endif;
    
    // Print results & Critical values
    local hd, tmp1, tmp2;
    hd = "ADF-stat"$|"Lag";
    tmp1 = tau|p-1;
    
    #ifminkernelversion(20)
        sprintf("%10s %10.4f", hd, tmp1);
        print;
        print "Critical Values:";
        sprintf("%10s", "1%"$~"5%"$~"10%");
        sprintf("%10.2f", cv');
        print;
    #else;
        hd$~(ntos(tmp1, 4));
        print "Critical Values:";
        ("1%"$~"5%"$~"10%")$|ntos(cv,5);
    #endif;
    
    // Print conclusion
    if tau < cv[1];
        print "Reject the null hypothesis of a unit root at the 1% level.";
    elseif tau < cv[2];
           print "Reject the null hypothesis of a unit root at the 5% level.";
    elseif tau < cv[3];  
           print "Reject the null hypothesis of a unit root at the 10% level.";
    else;  
           print "Cannot reject the null hypothesis of a unit root.";
    endif;
    
    retp(tau, p - 1, cv);
endp;

// Critical Values (see Fuller, 1976, Table 5.3)
proc(1) = _get_cv_adf(model, T);
    local crit, cv;
    
    if model == 0;
        crit = {-2.66 -1.95 -1.60,      @ T = 25  @
                -2.62 -1.95 -1.61,      @ T = 50  @
                -2.60 -1.95 -1.61,      @ T = 100 @
                -2.58 -1.95 -1.62,      @ T = 250 @        
                -2.58 -1.95 -1.62,      @ T = 500 @   
                -2.58 -1.95 -1.62,      @ T = 750 @   
                -2.58 -1.95 -1.62};     @ T = inf @   
    endif;

    if model == 1;
        crit = {-3.75 -2.99 -2.64,      @ T = 25  @
                -3.59 -2.93 -2.60,      @ T = 50  @
                -3.50 -2.90 -2.59,      @ T = 100 @
                -3.46 -2.88 -2.58,      @ T = 250 @        
                -3.44 -2.87 -2.57,      @ T = 500 @   
                -3.43 -2.87 -2.57,      @ T = 750 @   
                -3.42 -2.86 -2.57};     @ T = inf @   
    endif;

    if model == 2;
        crit = {-4.38 -3.60 -3.24,      @ T = 25  @
                -4.15 -3.50 -3.18,      @ T = 50  @
                -4.04 -3.45 -3.15,      @ T = 100 @
                -3.98 -3.42 -3.13,      @ T = 250 @        
                -3.97 -3.42 -3.13,      @ T = 500 @   
                -3.96 -3.41 -3.13,      @ T = 750 @   
                -3.96 -3.41 -3.13};     @ T = inf @   
    endif;
    
    if            T <= 25;     cv = crit[1,.]; endif;
    if 25 < T and T <= 50;     cv = crit[2,.]; endif;
    if 50 < T and T <= 100;    cv = crit[3,.]; endif;    
    if 100< T and T <= 250;    cv = crit[4,.]; endif;    
    if 250< T and T <= 500;    cv = crit[5,.]; endif;   
    if 500< T and T <= 750;    cv = crit[6,.]; endif;   
    if 750 < T            ;    cv = crit[7,.]; endif;   

retp(cv);
endp;
