
/*
**> fourier_adf
**  Reference:
**  Enders, W., and Lee, J. (2012),
**  "The flexible Fourier form and Dickey-Fuller type unit root test"
**  Economics Letters,117,(2012),196-199.
**
**  Format:  { ADFk, k, p, cv[k, .] } = Fourier_ADF(y, model, pmax, fmax, ic);
**
**  Input:   Y	     -  Nx1 matrix, data,
**           model   - 	1 = Constant
**                      2 = Constant and trend
**           pmax    -  Maximum number of lags for Dy; 0=no lags
**           fmax    -  Maximumum number of single Fourier frequency
**                      (upper bound is 5)
**           ic      -  Information Criterion:
**                      1=Akaike
**                      2=Schwarz
**                      3=t-stat significance
**
**  Output:  ADFk    - ADF(k) statistic
**           k       - Number of singlefrequency
**			 p       - number of lags selected by chosen information criterion
**			 cv      - 1%, 5%, 10% critical values for the chosen model and k
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/

/*07 January 2015*/


proc(4) = Fourier_ADF(y, model, pmax, fmax, ic);
    local t, p, j, taup, aicp, sicp, tstatp, ssrp, ssrk, tauk,
        k, dy, ly, dc, dt, sink, cosk, lmat, dep, y1, ldy,
        sbt, trnd, sinp, cosp, z, jj, isw, adf,
        b, e1, sig2, se, ssr, f, crit;
    
    t = rows(y);
    taup = zeros(pmax + 1, 1);
    aicp = zeros(pmax + 1, 1);
    sicp = zeros(pmax + 1, 1);
    tstatp = zeros(pmax + 1, 1);
    ssrp = zeros(pmax + 1, 1);
    ssrk = zeros(fmax, 1);
    tauk = zeros(fmax, 1);
    
    k = 1;
    do while k <= fmax;
        dy = diff(y, 1);
        ly = lagn(y, 1);
        
        // Deterministic term=constant
        dc = ones(t, 1);      
        
        // Deterministic term=trend
        dt = seqa(1, 1, t);     
        sink = sin(2 * pi * k * seqa(1, 1, t)/t);
        cosk = cos(2 * pi * k * seqa(1, 1, t)/t);
        p = 0;
        do while p <= pmax;
            lmat = zeros(rows(dy), p + 1);
            j = 1;
            do while j <= p;
                lmat[., j] = lagn(dy, j);
                j = j + 1;
            endo;
            dep = trimr(dy, p + 1, 0);
            y1 = trimr(ly, p + 1, 0);
            ldy = trimr(lmat, p + 1, 0);
            sbt = trimr(dc, p + 1, 0);
            trnd = trimr(dt, p + 1, 0);
            sinp = trimr(sink, p + 1, 0);
            cosp = trimr(cosk, p + 1, 0);
            if p == 0;
                if model == 1;
                    z = y1~sbt~sinp~cosp;
                endif;
                
                if model == 2;
                    z = y1~sbt~trnd~sinp~cosp;
                endif;
                
            elseif p > 0;
                if model == 1;
                    z = y1~sbt~sinp~cosp~ldy[., 1:p];
                endif;
                if model == 2;
                    z = y1~sbt~trnd~sinp~cosp~ldy[., 1:p];
                endif;
            endif;
            
            {b, e1, sig2, se, ssr} = myols(dep, z);
            taup[p+1] = b[1]/se[1];
            aicp[p+1] = ln(e1'e1/rows(z)) + 2 * (k + 2)/rows(z);
            sicp[p+1] = ln(e1'e1/rows(z)) + (cols(z) + 2) * ln(rows(z))/rows(z);
            tstatp[p+1] = b[cols(z)]/se[cols(z)];
            ssrp[p+1] = ssr;
            p = p + 1;
        endo;
        p  = _get_lag(ic, pmax, aicp, sicp, tstatp);
        ssrk[k] = ssrp[p];
        tauk[k] = taup[p];
        k = k + 1;
    endo;
    
    f = minindc(ssrk);
    ADF = tauk[f];
    
    // Critical Values (see, Enders & Lee, 2012, Table 1b)
    crit = zeros(5, 3);
    if model == 1;
        if T <= 150;
         crit = {-4.42 -3.81 -3.49,
                -3.97 -3.27 -2.91,
                -3.77 -3.07 -2.71,
                -3.64 -2.97 -2.64,
                -3.58 -2.93 -2.60};
        endif;
        
        if 151 < T and T <= 349;
         crit = {-4.37 -3.78 -3.47,
                -3.93 -3.26 -2.92,
                -3.74 -3.06 -2.72,
                -3.62 -2.98 -2.65,
                -3.55 -2.94 -2.62};
        endif;
        
        if 350 < T and T <= 500;
         crit = {-4.35 -3.76 -3.46,
                -3.91 -3.26 -2.91,
                -3.70 -3.06 -2.72,
                -3.62 -2.97 -2.66,
                -3.56 -2.94 -2.62};
        endif;
        
        if 500 < T;
        crit = {-4.31 -3.75 -3.45,
                -3.89 -3.25 -2.90,
                -3.69 -3.05 -2.71,
                -3.61 -2.96 -2.64,
                -3.53 -2.93 -2.61};
        endif;
    endif;
    
    if model == 2;
        if T <= 150;
        crit = {-4.95 -4.35 -4.05,
                -4.69 -4.05 -3.71,
                -4.45 -3.78 -3.44,
                -4.29 -3.65 -3.29,
                -4.20 -3.56 -3.22};
        endif;
        
        if 151 < T and T <= 349;
        crit = {-4.87 -4.31 -4.02,
                -4.62 -4.01 -3.69,
                -4.38 -3.77 -3.43,
                -4.27 -3.63 -3.31,
                -4.18 -3.56 -3.24};
        endif;
        
        if 350 < T and  T<= 500;
        crit = {-4.81 -4.29 -4.01,
                -4.57 -3.99 -3.67,
                -4.38 -3.76 -3.43,
                -4.25 -3.64 -3.31,
                -4.18 -3.56 -3.25};
        endif;
        
        if 500 < T;
        crit = {-4.80 -4.27 -4.00,
                -4.58 -3.98 -3.67,
                -4.38 -3.75 -3.43,
                -4.24 -3.63 -3.30,
                -4.16 -3.55 -3.24};
        endif;
    endif;
    
        
    "Fourier ADF test (Enders & Lee, 2012)";
    if model == 1;
        "--------Model A: Break in level        -----";
    endif;
    if model == 2;
        "--------Model C: Break in level & trend-----";
    endif;
    print;
    
    // Print results & Critical values
    local hd, tmp1;
    hd = "ADF-stat"$|"Frequency"$|"Lag";
    tmp1 = ADF|f|p-1;
    
    #ifminkernelversion(20)
        sprintf("%10s %10.4f", hd, tmp1);
        print;
        print "Critical Values:";
        sprintf("%10s", "1%"$~"5%"$~"10%");
        sprintf("%10.2f", crit[f, .]);
        print;
    #else;
        hd$~(ntos(tmp1, 4));
        print "Critical Values:";
        ("1%"$~"5%"$~"10%")$|ntos(crit[f, .], 5);
    #endif;
    
        // Print conclusion
    if ADF < crit[f, 1];
        print "Reject the null hypothesis of a unit root at the 1% level.";
    elseif ADF < crit[f, 2];
           print "Reject the null hypothesis of a unit root at the 5% level.";
    elseif ADF < crit[f, 3];  
           print "Reject the null hypothesis of a unit root at the 10% level.";
    else;  
           print "Cannot reject the null hypothesis of a unit root.";
    endif;
    print;
    
    retp(ADF, f, p-1, crit[f, .]);
endp;
