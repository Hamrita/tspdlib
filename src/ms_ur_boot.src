// This proc evaluates filter probabilities and likelihoods
proc (1) = ofn_null(th, th2, y, dy, capt, captst, pphi, nk, nth0, t, smooth);  @ this proc evaluates filter probs and likelihood @
    local th2, yn, sig, pm, eta, chsi, it, f, fit, fx, aa;
    
    th2 = trans_null(th, pphi);
    yn = {};
    
    it = 1;
    do while it <= pphi;
        yn = yn~dy[nk-it:capt-it, 1];
        it = it + 1;
    endo;
    
    dye = (0*y[nk-1:capt-1]+th2[1]+th2[3]*t+yn*th2[3+1:3+pphi])~
        (0*y[nk-1:capt-1]+th2[2]+th2[3]*t+yn*th2[3+1:3+pphi]);
    eta = dy[nk:capt]-dye;
    
    sig = th2[nth0-2].*ones(captst, 2);
    eta = ((eta)^2)./sig;
    
    eta = (1./sqrt(sig)).*exp(-eta/2);
    
    aa = minc(eta);
    if aa<1e-20;
        f = -100000;
        goto labb;
    endif;
    
    pm = (th2[nth0-1]~(1-th2[nth0]))|((1-th2[nth0-1])~th2[nth0]);
    chsi = 0.5|0.5;
    
    // Filter iteration
    f = 0;
    it = 1;
    do until it > captst;
        fx = chsi.*eta[it,.]';
        fit = sumc(fx);
        skif[it,.] = fx'/fit;
        f = f + ln(fit);
        chsi = pm*fx/fit;
        it = it+1;
    endo;
    dys = dye;
    dye = sumc((dys.*skif)');
    
    // Smoothed probabilities
    if smooth ne 0;  @ Smmothed probabilities if desired @
        skis = fsmooth(skif, pm);
    endif;
    
    labb:
        
        retp(-f);
endp;

proc (1) = trans_null(ja, pphi);
    local ja2, ncont;
    
    ja2 = ja;
    ncont = 2 + 1 + pphi;
    ja2[ncont+1] = ja2[ncont+1]^2;
    ncont = ncont + 1;
    ja2[ncont+1] = ja[ncont+1]^2/(1 + ja[ncont+1]^2);
    ja2[ncont+2] = ja[ncont+2]^2/(1 + ja[ncont+2]^2);
    
    retp(ja2);
endp;

// This proc evaluates filter probs and likelihood
proc (1) = ofn(th, th2, y, dy, capt, captst, pphi, nk, nth, t, smooth, ks);
    local th2, yn, sig, pm, eta, chsi, it, f, fit, fx, aa;
    
    th2 = trans(th, pphi);
    yn = {};
    it = 1;
    do while it <= pphi;
        yn = yn~dy[nk-it:capt-it, 1];
        it= it + 1;
    endo;
    dye = (th2[1]*y[nk-1:capt-1]+th2[2]+th2[4]*t+yn*th2[4+1:4+pphi])~
        (th2[1]*y[nk-1:capt-1]+th2[3]+th2[4]*t+yn*th2[4+1:4+pphi]);
    eta = dy[nk:capt] - dye;
    
    sig = th2[nth-2].*ones(captst, 2);
    eta = ((eta)^2)./sig;
    
    eta = (1./sqrt(sig)).*exp(-eta/2);
    
    aa = minc(eta);
    if aa<1e-20;
        f = -100000;
        goto labb;
    endif;
    
    pm = (th2[nth-1]~(1-th2[nth]))|((1-th2[nth-1])~th2[nth]);
    chsi = 0.5|0.5;
    
    fun = {};
    
    // Filter Iteration
    f = 0;
    it = 1;
    do until it > captst;
        fx = chsi.*eta[it, .]';
        fit = sumc(fx);
        skif[it, .] = fx'/fit;
        f = f + ln(fit);
        fun = fun|ln(fit);
        chsi = pm*fx/fit;
        it = it + 1;
    endo;
    
    dys = dye;
    dye = sumc((dys.*skif)');
    
    // Smmothed probabilities if desired
    if smooth ne 0;
        skis = fsmooth(skif, pm);
    endif;
    
    labb:
        if ks == 1;
        retp(fun);
    else;
        retp(-f);
    endif;
endp;

proc trans(ja, pphi);
    local ja2, ncont;
    
    ja2 = ja;
    ncont = 1 + 2 + 1 + pphi;
    ja2[ncont+1] = ja2[ncont+1]^2;
    ncont = ncont + 1;
    ja2[ncont+1] = ja[ncont+1]^2/(1 + ja[ncont+1]^2);
    ja2[ncont+2] = ja[ncont+2]^2/(1 + ja[ncont+2]^2);
    
    retp(ja2);
endp;

proc (1) = stdfun(x, pphi);
    local h, va, hu, stdor, gr, hi, Hfin, std2;
    
    h = hessp(&ofn, x);
    va = eigrs(h);
    @if minc(eigrs(h))<=0;
    cls;
    "Negative Hessian is not positive definite";
    end;
    endif;@
    
    hi = invpd(h);
    stdor = diag(hi)^.5;
    gr = gradfd(&trans, x, pphi);
    Hfin = gr*hi*gr';
    std2 = diag(Hfin)^.5;
    
    retp(std2);
endp;

proc fsmooth(skifn, pmn, captst);
    local skisn, it, ihk, hk, ns, n;
    
    ns = 2;
    n = 2;
    skisn = zeros(captst, ns);
    skisn[captst, .] = skifn[captst, .];
    
    it = 1;
    do until it == captst;
        if minc(skif[captst-it,.]') > 1.e-150;
            
            skisn[captst-it, .] = skifn[captst-it,.].*
                ((skisn[captst-it+1, .]./(skifn[captst-it, .]*pmn'))*pmn);
        else;   @ adjust code so as not to divide by zero @
            hk = skifn[captst-it, .]*pmn';
            ihk = 1;
            do until ihk > n;
                if hk[1, ihk] > 1.e-150;
                    hk[1, ihk] = skisn[captst-it+1, ihk]/hk[1, ihk];
                else;
                    hk[1, ihk] = 0;
                endif;
                ihk = ihk + 1;
            endo;
            skisn[captst-it, .] = skifn[captst-it, .].*(hk*pmn);
        endif;
        
        it = it + 1;
    endo;
    
    retp(skisn);
endp;

end;
